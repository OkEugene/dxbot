package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	subscribers = make(map[int64]bool) // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
	activeChats = make(map[int64]bool) // –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	chatPairs   = make(map[int64]int64) // –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω
	mutex       sync.Mutex             // –î–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
)

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)

	if botToken == "" || adminID == 0 {
		log.Fatal("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ ADMIN_ID")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message, adminID)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery, adminID)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, adminID int64) {
	chatID := msg.Chat.ID

	if chatID == adminID {
		if msg.Photo != nil || msg.Document != nil {
			sendStockUpdate(bot, msg)
			return
		}
		handleAdminReply(bot, msg)
		return
	}

	mutex.Lock()
	isActive := activeChats[chatID]
	mutex.Unlock()

	if isActive {
		forwardToAdmin(bot, chatID, msg.MessageID, adminID)
		return
	}

	if msg.Text == "/start" {
		sendMainMenu(bot, chatID)
	} else {
		sendMainMenu(bot, chatID)
	}
}

func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, adminID int64) {
	chatID := query.Message.Chat.ID
	data := query.Data

	bot.Send(tgbotapi.NewCallback(query.ID, ""))

	switch data {
	case "subscribe_stock":
		mutex.Lock()
		subscribers[chatID] = true
		mutex.Unlock()

		user := query.From
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤"))
		
		adminMsg := fmt.Sprintf("üéâ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫:\nID: %d\nUsername: @%s\n–ò–º—è: %s",
			user.ID,
			getUsername(user),
			getFullName(user),
		)
		bot.Send(tgbotapi.NewMessage(adminID, adminMsg))

		sendMainMenu(bot, chatID)

	case "contact_manager":
		mutex.Lock()
		activeChats[chatID] = true
		chatPairs[chatID] = adminID
		mutex.Unlock()

		bot.Send(tgbotapi.NewMessage(chatID, "üì© –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–∫—Ä—ã—Ç. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."))
		
		user := query.From
		adminMsg := fmt.Sprintf("‚ùó –ù–æ–≤—ã–π —á–∞—Ç:\nID: %d\nUsername: @%s\n–ò–º—è: %s",
			user.ID,
			getUsername(user),
			getFullName(user),
		)
		bot.Send(tgbotapi.NewMessage(adminID, adminMsg))

	case "close_menu":
		bot.Send(tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /start"))
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	mutex.Lock()
	isSubscribed := subscribers[chatID]
	mutex.Unlock()

	subscribeBtn := tgbotapi.NewInlineKeyboardButtonData("üìä –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –æ—Å—Ç–∞—Ç–∫–æ–≤", "subscribe_stock")
	if isSubscribed {
		subscribeBtn = tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –æ—Å—Ç–∞—Ç–∫–∏", "subscribe_stock")
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(subscribeBtn),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüíº –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", "contact_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", "close_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üî∑ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* üî∑\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendStockUpdate(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	mutex.Lock()
	defer mutex.Unlock()

	if len(subscribers) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"))
		return
	}

	caption := "üõí *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n"
	if msg.Caption != "" {
		caption = msg.Caption
	}

	successCount := 0
	for userID := range subscribers {
		var err error
		
		if len(msg.Photo) > 0 {
			photo := msg.Photo[len(msg.Photo)-1]
			photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FileID(photo.FileID))
			photoMsg.Caption = caption
			photoMsg.ParseMode = "Markdown"
			_, err = bot.Send(photoMsg)
		} else if msg.Document != nil {
			docMsg := tgbotapi.NewDocument(userID, tgbotapi.FileID(msg.Document.FileID))
			docMsg.Caption = caption
			docMsg.ParseMode = "Markdown"
			_, err = bot.Send(docMsg)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		} else {
			successCount++
		}
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ %d –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", successCount)))
}

func handleAdminReply(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	if msg.ReplyToMessage != nil && msg.ReplyToMessage.ForwardFrom != nil {
		userID := msg.ReplyToMessage.ForwardFrom.ID
		reply := tgbotapi.NewMessage(userID, "üë®‚Äçüíº –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
		bot.Send(reply)
		return
	}

	mutex.Lock()
	defer mutex.Unlock()
	
	for userID, admID := range chatPairs {
		if admID == msg.Chat.ID {
			reply := tgbotapi.NewMessage(userID, "üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
			bot.Send(reply)
			break
		}
	}
}

func forwardToAdmin(bot *tgbotapi.BotAPI, chatID int64, messageID int, adminID int64) {
	mutex.Lock()
	chatPairs[chatID] = adminID
	mutex.Unlock()

	forward := tgbotapi.NewForward(adminID, chatID, messageID)
	bot.Send(forward)
}

func getFullName(user *tgbotapi.User) string {
	name := user.FirstName
	if user.LastName != "" {
		name += " " + user.LastName
	}
	if name == "" {
		name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
	}
	return name
}

func getUsername(user *tgbotapi.User) string {
	if user.UserName == "" {
		return "–Ω–µ—Ç username"
	}
	return user.UserName
}