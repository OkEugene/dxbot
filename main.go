package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	activeChats   = make(map[int64]int64) // userID -> adminID
	subscribers   = make(map[int64]bool)
	mutex         sync.Mutex
)

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)

	if botToken == "" || adminID == 0 {
		log.Fatal("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ ADMIN_ID")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message, adminID)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery, adminID)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, adminID int64) {
	chatID := msg.Chat.ID

	// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
	if chatID == adminID {
		if msg.Photo != nil || msg.Document != nil {
			sendStockToSubscribers(bot, msg)
			return
		}
		handleAdminMessage(bot, msg)
		return
	}

	// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	mutex.Lock()
	_, isActive := activeChats[chatID]
	mutex.Unlock()

	if isActive {
		forwardToAdmin(bot, chatID, msg.MessageID, adminID)
		return
	}

	// –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é –ø—Ä–∏ –ª—é–±–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –µ—Å–ª–∏ —á–∞—Ç –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω
	sendMainMenu(bot, chatID)
}

func handleAdminMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	if msg.ReplyToMessage != nil && msg.ReplyToMessage.ForwardFrom != nil {
		// –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		userID := msg.ReplyToMessage.ForwardFrom.ID
		sendToUser(bot, userID, "üë®‚Äçüíº –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
	} else {
		// –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∞—Ç—É)
		mutex.Lock()
		for userID, admID := range activeChats {
			if admID == msg.Chat.ID {
				sendToUser(bot, userID, "üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
				break
			}
		}
		mutex.Unlock()
	}
}

func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, adminID int64) {
	chatID := query.Message.Chat.ID
	data := query.Data

	// –£–¥–∞–ª—è–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
	bot.Send(tgbotapi.NewCallback(query.ID, ""))

	switch data {
	case "subscribe_news":
		mutex.Lock()
		subscribers[chatID] = true
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –Ω–æ–≤–æ—Å—Ç–µ–π"))
		sendMainMenu(bot, chatID)

	case "unsubscribe_news":
		mutex.Lock()
		delete(subscribers, chatID)
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π"))
		sendMainMenu(bot, chatID)

	case "contact_manager":
		mutex.Lock()
		activeChats[chatID] = adminID
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "üì© –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ç–∫—Ä—ã—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å."))
		bot.Send(tgbotapi.NewMessage(adminID, fmt.Sprintf("üîî –ù–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", chatID)))

	case "end_chat":
		endChatSession(bot, chatID, adminID)

	case "open_menu":
		sendMainMenu(bot, chatID)
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	mutex.Lock()
	isSubscribed := subscribers[chatID]
	_, isActiveChat := activeChats[chatID]
	mutex.Unlock()

	// –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
	var rows [][]tgbotapi.InlineKeyboardButton

	// –ö–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏/–æ—Ç–ø–∏—Å–∫–∏
	if isSubscribed {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üö´ –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", "unsubscribe_news"),
		))
	} else {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üì∞ –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", "subscribe_news"),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	if isActiveChat {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üîö –ó–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç", "end_chat"),
		))
	} else {
		rows = append(rows, tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüíº –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
		))
	}

	// –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–µ–Ω—é
	rows = append(rows, tgbotapi.NewInlineKeyboardRow(
		tgbotapi.NewInlineKeyboardButtonData("üîÑ –û–±–Ω–æ–≤–∏—Ç—å –º–µ–Ω—é", "open_menu"),
	))

	keyboard := tgbotapi.NewInlineKeyboardMarkup(rows...)

	msg := tgbotapi.NewMessage(chatID, "üìã *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendStockToSubscribers(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	mutex.Lock()
	defer mutex.Unlock()

	if len(subscribers) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "‚ùå –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"))
		return
	}

	caption := "üõí *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –æ—Å—Ç–∞—Ç–∫–∏ –Ω–∞ —Å–∫–ª–∞–¥–µ:*\n"
	if msg.Caption != "" {
		caption = msg.Caption
	}

	successCount := 0
	for userID := range subscribers {
		var err error
		
		if len(msg.Photo) > 0 {
			photo := msg.Photo[len(msg.Photo)-1]
			photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FileID(photo.FileID))
			photoMsg.Caption = caption
			photoMsg.ParseMode = "Markdown"
			_, err = bot.Send(photoMsg)
		} else if msg.Document != nil {
			docMsg := tgbotapi.NewDocument(userID, tgbotapi.FileID(msg.Document.FileID))
			docMsg.Caption = caption
			docMsg.ParseMode = "Markdown"
			_, err = bot.Send(docMsg)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		} else {
			successCount++
		}
	}

	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, fmt.Sprintf("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ %d –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", successCount)))
}

func sendToUser(bot *tgbotapi.BotAPI, userID int64, text string) {
	msg := tgbotapi.NewMessage(userID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
	}
}

func forwardToAdmin(bot *tgbotapi.BotAPI, chatID int64, messageID int, adminID int64) {
	mutex.Lock()
	activeChats[chatID] = adminID
	mutex.Unlock()

	forward := tgbotapi.NewForward(adminID, chatID, messageID)
	if _, err := bot.Send(forward); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: %v", err)
	}
}

func endChatSession(bot *tgbotapi.BotAPI, chatID int64, adminID int64) {
	mutex.Lock()
	delete(activeChats, chatID)
	mutex.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, "üó£ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω"))
	bot.Send(tgbotapi.NewMessage(adminID, fmt.Sprintf("üîï –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %d –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç", chatID)))
	sendMainMenu(bot, chatID)
}