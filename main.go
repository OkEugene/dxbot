package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

var (
	activeChats   = make(map[int64]int64) // userID -> adminID
	subscribers   = make(map[int64]bool)
	mutex         sync.Mutex
)

func main() {
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)

	if botToken == "" || adminID == 0 {
		log.Fatal("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ ADMIN_ID")
	}

	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message, adminID)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery, adminID)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, adminID int64) {
	chatID := msg.Chat.ID

	// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –∞–¥–º–∏–Ω–∞
	if chatID == adminID {
		if msg.ReplyToMessage != nil && msg.ReplyToMessage.ForwardFrom != nil {
			// –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
			userID := msg.ReplyToMessage.ForwardFrom.ID
			sendToUser(bot, userID, "üë®‚Äçüíº –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
		} else {
			// –ü—Ä—è–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —á–∞—Ç—É)
			mutex.Lock()
			for userID, admID := range activeChats {
				if admID == adminID {
					sendToUser(bot, userID, "üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
					break
				}
			}
			mutex.Unlock()
		}
		return
	}

	// –°–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
	mutex.Lock()
	_, isActive := activeChats[chatID]
	mutex.Unlock()

	if msg.Text == "/stop" && isActive {
		endChatSession(bot, chatID, adminID)
		return
	}

	if isActive {
		forwardToAdmin(bot, chatID, msg.MessageID, adminID)
		return
	}

	switch msg.Text {
	case "/start":
		sendMainMenu(bot, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "‚ÑπÔ∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (/start)")
		bot.Send(msg)
	}
}

func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, adminID int64) {
	chatID := query.Message.Chat.ID
	data := query.Data

	// –£–¥–∞–ª—è–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
	bot.Send(tgbotapi.NewCallback(query.ID, ""))

	switch data {
	case "subscribe":
		mutex.Lock()
		subscribers[chatID] = true
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"))
		sendMainMenu(bot, chatID)

	case "unsubscribe":
		mutex.Lock()
		delete(subscribers, chatID)
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π"))
		sendMainMenu(bot, chatID)

	case "contact_manager":
		mutex.Lock()
		activeChats[chatID] = adminID
		mutex.Unlock()
		bot.Send(tgbotapi.NewMessage(chatID, "üì© –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /stop"))
		bot.Send(tgbotapi.NewMessage(adminID, fmt.Sprintf("üîî –ù–æ–≤—ã–π —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", chatID)))

	case "close_menu":
		bot.Send(tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /start"))
	}
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	mutex.Lock()
	isSubscribed := subscribers[chatID]
	mutex.Unlock()

	// –£–ª—É—á—à–µ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ —Å —ç–º–æ–¥–∑–∏ –∏ —á–µ—Ç–∫–∏–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
	subscribeBtn := tgbotapi.NewInlineKeyboardButtonData("üîî –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–æ–≤–æ—Å—Ç–∏", "subscribe")
	if isSubscribed {
		subscribeBtn = tgbotapi.NewInlineKeyboardButtonData("üîï –û—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π", "unsubscribe")
	}

	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(subscribeBtn),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", "contact_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é", "close_menu"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üì± *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é*")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendToUser(bot *tgbotapi.BotAPI, userID int64, text string) {
	msg := tgbotapi.NewMessage(userID, text)
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
	}
}

func forwardToAdmin(bot *tgbotapi.BotAPI, chatID int64, messageID int, adminID int64) {
	mutex.Lock()
	activeChats[chatID] = adminID
	mutex.Unlock()

	forward := tgbotapi.NewForward(adminID, chatID, messageID)
	if _, err := bot.Send(forward); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: %v", err)
	}
}

func endChatSession(bot *tgbotapi.BotAPI, chatID int64, adminID int64) {
	mutex.Lock()
	delete(activeChats, chatID)
	mutex.Unlock()

	bot.Send(tgbotapi.NewMessage(chatID, "üó£ –ß–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. –î–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é (/start)"))
	bot.Send(tgbotapi.NewMessage(adminID, fmt.Sprintf("üîï –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d –∑–∞–≤–µ—Ä—à–µ–Ω", chatID)))
	
}