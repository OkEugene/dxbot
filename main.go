package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
var (
	subscribers = make(map[int64]bool) // –ü–æ–¥–ø–∏—Å—á–∏–∫–∏ –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É
	activeChats = make(map[int64]bool) // –ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	chatPairs   = make(map[int64]int64) // –°–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å-–∞–¥–º–∏–Ω
	mutex       sync.Mutex              // –î–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
)

func main() {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	adminID, _ := strconv.ParseInt(os.Getenv("ADMIN_ID"), 10, 64)

	if botToken == "" || adminID == 0 {
		log.Fatal("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ ADMIN_ID")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: @%s", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message, adminID)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery, adminID)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, msg *tgbotapi.Message, adminID int64) {
	chatID := msg.Chat.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if chatID == adminID {
		// –†–∞—Å—Å—ã–ª–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
		if msg.Photo != nil || msg.Document != nil {
			sendToSubscribers(bot, msg)
			return
		}
		// –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		handleAdminReply(bot, msg)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
	mutex.Lock()
	isActive := activeChats[chatID]
	mutex.Unlock()

	// –ï—Å–ª–∏ —á–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω - –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
	if isActive {
		forwardToAdmin(bot, chatID, msg.MessageID, adminID)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	switch msg.Text {
	case "/start":
		sendMainMenu(bot, chatID)
	default:
		sendMainMenu(bot, chatID)
	}
}

func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, adminID int64) {
	chatID := query.Message.Chat.ID
	data := query.Data

	// –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
	bot.Send(tgbotapi.NewCallback(query.ID, ""))

	switch data {
	case "subscribe":
		mutex.Lock()
		subscribers[chatID] = true
		mutex.Unlock()
		
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		user := query.From
		userName := getUserName(user)
		
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π")
		bot.Send(msg)
		
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–µ
		adminMsg := tgbotapi.NewMessage(
			adminID,
			fmt.Sprintf("üéâ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫:\nID: %d\nUsername: @%s\n–ò–º—è: %s",
				user.ID,
				getUserUsername(user),
				userName,
			),
		)
		bot.Send(adminMsg)
		
		sendMainMenu(bot, chatID)

	case "contact_manager":
		mutex.Lock()
		activeChats[chatID] = true
		chatPairs[chatID] = adminID
		mutex.Unlock()

		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
		msg := tgbotapi.NewMessage(chatID, "üì© –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
		bot.Send(msg)
		
		// –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
		user := query.From
		userName := getUserName(user)
		
		// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
		adminMsg := tgbotapi.NewMessage(
			adminID, 
			fmt.Sprintf("‚ùó –ù–æ–≤—ã–π —á–∞—Ç:\nID: %d\nUsername: @%s\n–ò–º—è: %s",
				user.ID,
				getUserUsername(user),
				userName,
			),
		)
		bot.Send(adminMsg)

	case "close":
		msg := tgbotapi.NewMessage(chatID, "–ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. –î–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –Ω–∞–ø–∏—à–∏—Ç–µ /start")
		bot.Send(msg)
	}
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
func getUserName(user *tgbotapi.User) string {
	name := user.FirstName
	if user.LastName != "" {
		name += " " + user.LastName
	}
	if name == "" {
		name = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
	}
	return name
}

func getUserUsername(user *tgbotapi.User) string {
	if user.UserName == "" {
		return "–Ω–µ—Ç username"
	}
	return user.UserName
}

func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
	mutex.Lock()
	isSubscribed := subscribers[chatID]
	mutex.Unlock()

	// –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	subscribeBtn := tgbotapi.NewInlineKeyboardButtonData("üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–π", "subscribe")
	if isSubscribed {
		subscribeBtn = tgbotapi.NewInlineKeyboardButtonData("‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É", "subscribe")
	}

	// –°–æ–∑–¥–∞–µ–º –º–µ–Ω—é —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
	keyboard := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			subscribeBtn,
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üë®‚Äçüíº –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", "contact_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close"),
		),
	)

	msg := tgbotapi.NewMessage(chatID, "üî∑ *–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é* üî∑\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ParseMode = "Markdown"
	msg.ReplyMarkup = keyboard
	bot.Send(msg)
}

func sendToSubscribers(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	mutex.Lock()
	defer mutex.Unlock()

	if len(subscribers) == 0 {
		bot.Send(tgbotapi.NewMessage(msg.Chat.ID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"))
		return
	}

	// –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
	caption := "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –Ω–∞—Å –Ω–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!"
	if msg.Caption != "" {
		caption = msg.Caption
	}

	successCount := 0
	for userID := range subscribers {
		var err error
		
		if len(msg.Photo) > 0 {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
			photo := msg.Photo[len(msg.Photo)-1]
			photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FileID(photo.FileID))
			photoMsg.Caption = caption
			_, err = bot.Send(photoMsg)
		} else if msg.Document != nil {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
			docMsg := tgbotapi.NewDocument(userID, tgbotapi.FileID(msg.Document.FileID))
			docMsg.Caption = caption
			_, err = bot.Send(docMsg)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %d: %v", userID, err)
		} else {
			successCount++
		}
	}

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	report := fmt.Sprintf("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ %d –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º", successCount)
	bot.Send(tgbotapi.NewMessage(msg.Chat.ID, report))
}

func handleAdminReply(bot *tgbotapi.BotAPI, msg *tgbotapi.Message) {
	// –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if msg.ReplyToMessage != nil && msg.ReplyToMessage.ForwardFrom != nil {
		userID := msg.ReplyToMessage.ForwardFrom.ID
		reply := tgbotapi.NewMessage(userID, "üë®‚Äçüíº –û—Ç–≤–µ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
		bot.Send(reply)
		return
	}

	// –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
	mutex.Lock()
	defer mutex.Unlock()
	
	for userID, adminID := range chatPairs {
		if adminID == msg.Chat.ID {
			reply := tgbotapi.NewMessage(userID, "üë®‚Äçüíº –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n"+msg.Text)
			bot.Send(reply)
			break
		}
	}
}

func forwardToAdmin(bot *tgbotapi.BotAPI, chatID int64, messageID int, adminID int64) {
	mutex.Lock()
	chatPairs[chatID] = adminID
	mutex.Unlock()

	forward := tgbotapi.NewForward(adminID, chatID, messageID)
	bot.Send(forward)
}