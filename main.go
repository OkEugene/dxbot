package main

import (
	"fmt"
	"log"
	"os"
	"strconv"
	"sync"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
var (
	activeChats = struct {
		sync.Mutex
		users map[int64]bool
	}{users: make(map[int64]bool)}

	userToAdmin = struct {
		sync.Mutex
		chats map[int64]int64
	}{chats: make(map[int64]int64)}

	subscribers = struct {
		sync.Mutex
		users map[int64]bool
	}{users: make(map[int64]bool)}
)

func main() {
	// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
	err := godotenv.Load()
	if err != nil {
		log.Print("–§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
	}

	botToken := os.Getenv("TELEGRAM_BOT_TOKEN")
	adminIDStr := os.Getenv("ADMIN_ID")

	if botToken == "" || adminIDStr == "" {
		log.Fatal("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_BOT_TOKEN –∏ ADMIN_ID")
	}

	adminID, err := strconv.ParseInt(adminIDStr, 10, 64)
	if err != nil {
		log.Fatal("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ADMIN_ID")
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Fatal(err)
	}
	bot.Debug = true

	log.Printf("–ë–æ—Ç @%s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
	for update := range updates {
		if update.Message != nil {
			handleMessage(bot, update.Message, adminID)
		} else if update.CallbackQuery != nil {
			handleCallback(bot, update.CallbackQuery, adminID)
		}
	}
}

func handleMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message, adminID int64) {
	chatID := message.Chat.ID

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if chatID == adminID {
		// –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
		if message.Photo != nil || message.Document != nil {
			sendToSubscribers(bot, message, adminID)
			return
		}
		handleAdminMessage(bot, message)
		return
	}

	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	activeChats.Lock()
	isChatActive := activeChats.users[chatID]
	activeChats.Unlock()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stop
	if message.Text == "/stop" && isChatActive {
		endChatWithManager(bot, chatID, adminID)
		return
	}

	// –ï—Å–ª–∏ –∞–∫—Ç–∏–≤–µ–Ω —á–∞—Ç —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
	if isChatActive {
		if message.Text == "/start" {
			sendMainMenu(bot, chatID)
			return
		}

		// –ü–µ—Ä–µ—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
		forwardedMsg := tgbotapi.NewForward(adminID, chatID, message.MessageID)
		if _, err := bot.Send(forwardedMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å—ã–ª–∫–∏: %v", err)
		}
		
		userToAdmin.Lock()
		userToAdmin.chats[chatID] = adminID
		userToAdmin.Unlock()
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	switch message.Text {
	case "/start":
		sendMainMenu(bot, chatID)
	default:
		msg := tgbotapi.NewMessage(chatID, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é (/start)")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
		sendMainMenu(bot, chatID)
	}
}

// –†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
func sendToSubscribers(bot *tgbotapi.BotAPI, message *tgbotapi.Message, adminID int64) {
	subscribers.Lock()
	defer subscribers.Unlock()

	if len(subscribers.users) == 0 {
		msg := tgbotapi.NewMessage(adminID, "–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
		return
	}

	caption := "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –£ –Ω–∞—Å –Ω–æ–≤–æ–µ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–µ. –û–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º!"
	if message.Caption != "" {
		caption = message.Caption
	}

	successCount := 0
	failCount := 0

	for userID := range subscribers.users {
		var err error
		
		if len(message.Photo) > 0 {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ
			photo := message.Photo[len(message.Photo)-1]
			photoMsg := tgbotapi.NewPhoto(userID, tgbotapi.FileID(photo.FileID))
			photoMsg.Caption = caption
			_, err = bot.Send(photoMsg)
		} else if message.Document != nil {
			// –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞
			docMsg := tgbotapi.NewDocument(userID, tgbotapi.FileID(message.Document.FileID))
			docMsg.Caption = caption
			_, err = bot.Send(docMsg)
		}

		if err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª—è %d: %v", userID, err)
			failCount++
			// –£–¥–∞–ª—è–µ–º –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏—Ö –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
			if err.Error() == "Forbidden: bot was blocked by the user" {
				delete(subscribers.users, userID)
			}
		} else {
			successCount++
		}
	}

	// –û—Ç—á–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
	report := fmt.Sprintf("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞:\n–£—Å–ø–µ—à–Ω–æ: %d\n–ù–µ —É–¥–∞–ª–æ—Å—å: %d", successCount, failCount)
	if failCount > 0 {
		report += "\n\n–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–≤—à–∏–µ –±–æ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–¥–∞–ª–µ–Ω—ã –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"
	}
	if _, err := bot.Send(tgbotapi.NewMessage(adminID, report)); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞: %v", err)
	}
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º
func endChatWithManager(bot *tgbotapi.BotAPI, userID, adminID int64) {
	activeChats.Lock()
	delete(activeChats.users, userID)
	activeChats.Unlock()

	userToAdmin.Lock()
	delete(userToAdmin.chats, userID)
	userToAdmin.Unlock()

	msg := tgbotapi.NewMessage(userID, "üó£ –î–∏–∞–ª–æ–≥ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω. /start - –æ—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é")
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}

	adminMsg := tgbotapi.NewMessage(adminID, fmt.Sprintf("‚ö† –î–∏–∞–ª–æ–≥ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d –∑–∞–≤–µ—Ä—à–µ–Ω", userID))
	if _, err := bot.Send(adminMsg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
	}

	sendMainMenu(bot, userID)
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func handleAdminMessage(bot *tgbotapi.BotAPI, message *tgbotapi.Message) {
	// –û—Ç–≤–µ—Ç –Ω–∞ –ø–µ—Ä–µ—Å–ª–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
	if message.ReplyToMessage != nil && message.ReplyToMessage.ForwardFrom != nil {
		userID := message.ReplyToMessage.ForwardFrom.ID
		msg := tgbotapi.NewMessage(userID, message.Text)
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
		return
	}

	// –ü—Ä—è–º–æ–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
	userToAdmin.Lock()
	defer userToAdmin.Unlock()
	
	for u, a := range userToAdmin.chats {
		if a == message.Chat.ID {
			msg := tgbotapi.NewMessage(u, message.Text)
			if _, err := bot.Send(msg); err != nil {
				log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
			}
			break
		}
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫
func handleCallback(bot *tgbotapi.BotAPI, query *tgbotapi.CallbackQuery, adminID int64) {
	chatID := query.Message.Chat.ID
	data := query.Data

	// –û—Ç–≤–µ—Ç –Ω–∞ callback (—É–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏")
	if _, err := bot.Send(tgbotapi.NewCallback(query.ID, "")); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ callback: %v", err)
	}

	switch data {
	case "subscribe":
		subscribers.Lock()
		subscribers.users[chatID] = true
		subscribers.Unlock()
		
		msg := tgbotapi.NewMessage(chatID, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
		sendMainMenu(bot, chatID)

	case "unsubscribe":
		subscribers.Lock()
		delete(subscribers.users, chatID)
		subscribers.Unlock()
		
		msg := tgbotapi.NewMessage(chatID, "‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
		sendMainMenu(bot, chatID)

	case "contact_manager":
		activeChats.Lock()
		activeChats.users[chatID] = true
		activeChats.Unlock()

		userToAdmin.Lock()
		userToAdmin.chats[chatID] = adminID
		userToAdmin.Unlock()

		msg := tgbotapi.NewMessage(chatID, "üì© –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É. /stop - –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")
		buttons := tgbotapi.NewInlineKeyboardMarkup(
			tgbotapi.NewInlineKeyboardRow(
				tgbotapi.NewInlineKeyboardButtonData("üî¥ –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", "end_chat"),
			),
		)
		msg.ReplyMarkup = buttons
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}

		adminMsg := tgbotapi.NewMessage(adminID, fmt.Sprintf("‚ùó –ß–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º %d", chatID))
		if _, err := bot.Send(adminMsg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}

	case "end_chat":
		endChatWithManager(bot, chatID, adminID)

	case "close":
		msg := tgbotapi.NewMessage(chatID, "üîí –ú–µ–Ω—é –∑–∞–∫—Ä—ã—Ç–æ. /start - –æ—Ç–∫—Ä—ã—Ç—å —Å–Ω–æ–≤–∞")
		if _, err := bot.Send(msg); err != nil {
			log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: %v", err)
		}
	}
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
func sendMainMenu(bot *tgbotapi.BotAPI, chatID int64) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥–ø–∏—Å–∫–∏
	subscribers.Lock()
	isSubscribed := subscribers.users[chatID]
	subscribers.Unlock()

	// –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
	var subscribeBtnText, subscribeBtnData string
	if isSubscribed {
		subscribeBtnText = "‚ùå –û—Ç–ø–∏—Å–∞—Ç—å—Å—è"
		subscribeBtnData = "unsubscribe"
	} else {
		subscribeBtnText = "üì© –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è"
		subscribeBtnData = "subscribe"
	}

	// –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
	buttons := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData(subscribeBtnText, subscribeBtnData),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("üí¨ –ù–∞–ø–∏—Å–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", "contact_manager"),
		),
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("‚ùå –ó–∞–∫—Ä—ã—Ç—å", "close"),
		),
	)

	// –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–Ω—é
	msg := tgbotapi.NewMessage(chatID, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
	msg.ReplyMarkup = buttons
	if _, err := bot.Send(msg); err != nil {
		log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–Ω—é: %v", err)
	}
}